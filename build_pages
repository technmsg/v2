#!/bin/sh
#
# Build static pages from HTML and Markdown content.
#

if [ -f config ] ; then
  source config
fi

THEME=${THEME:-"basic"}
BASE_DIR="v2"
BASE_URL="/$BASE_DIR"
DB=".db"

echo "Using $THEME."
if [ ! -d themes/$THEME ] ; then
  echo "Theme not found, aborting."
  exit
fi

# incremental build, unless forced 
if [ "$1" == "force" ] ; then
  echo "forcing content updates"
  rm $DB/last_gen

  # Clean up old indexes.
  rm $DB/tags.csv $DB/cats.csv $DB/index.csv
fi

# If we know about the last generation, find updated content; if not (or if we
# force it), find all content. All content to queue.
if [ -e $DB/last_gen ] ; then
  find -L content -type f -newer $DB/last_gen > $DB/run_list
else
  echo "rebuilding all, using ${THEME} theme"
  find -L content -type f > $DB/run_list
fi

# Step through the content queue.
for ITEM in $(sort -u $DB/run_list) ; do

  SRC_DIR=$(dirname $ITEM)
  SRC_FILE=$(basename "$ITEM")
  SRC_TYPE="${SRC_FILE##*.}"
  SRC_NAME="${SRC_FILE%.*}"

  # ugly replace syntax, but works in bash v3
  BUILD_DIR=$(echo $SRC_DIR | sed -e s#^content#build${BASE_URL}#)

  # fully qualified URI
  FQ_URI="${FQ_BASE}${BUILD_DIR}/${SRC_NAME}.html"
  FQ_URI=$(echo $FQ_URI | sed -e s#build##)
  #echo "  FQ: ${FQ_URI}"

  # extract metadata from content files
  ITEM_TITLE=$(grep '<!-- title:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')
  ITEM_TAGS=$(grep '<!-- tags:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')
  ITEM_CATS=$(grep '<!-- categories:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')
  ITEM_PUB_DATE=$(grep '<!-- published:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')
  ITEM_MOD_DATE=$(grep '<!-- updated:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')
  ITEM_SUMMARY=$(grep '<!-- summary:' $ITEM | sed -e 's/^.*: //' | sed -e 's/ -->$//')

  # if our modification date isn't set, use the publication date
  if [[ ! -z $ITEM_PUB_DATE && -z $ITEM_MOD_DATE ]] ; then
    $ITEM_MOD_DATE = $ITEM_PUB_DATE
  fi

  # for now, all entries must have a title
  if [[ -z $ITEM_TITLE ]] ; then
    echo "ignoring $ITEM, no title"
    continue
  fi

  # setup the build directory
  if [ ! -d $BUILD_DIR ] ; then
    mkdir -pv $BUILD_DIR || $(echo "Could not create build dir." ; exit 1)
  fi

  # only process known file extensions
  if [[ "$SRC_TYPE" == "md" || "$SRC_TYPE" == "html" ]] ; then
    echo "$ITEM"
  else
    echo "ignoring: unknown type ($SRC_TYPE)"
    continue
  fi

  # dump some metadata for offline indexing
  echo "$ITEM|$ITEM_TITLE|$ITEM_SUMMARY" >> $DB/index.csv
  if [ ! -z "$ITEM_TAGS" ] ; then
    #echo "  tags $ITEM_TAGS"
    echo "$ITEM|$ITEM_TITLE|$ITEM_TAGS" >> $DB/tags.csv
  fi
  if [ ! -z $ITEM_CATS ] ; then
    #echo "  cats $ITEM_CATS"
    echo "$ITEM|$ITEM_TITLE|$ITEM_CATS" >> $DB/cats.csv
  fi

  # wrap the content within the specified templates, making substitutions when
  # necessary; long term will have to do multiple replacements per file.

  # template magic: header
  sed "s/{{TITLE}}/${ITEM_TITLE}/" themes/${THEME}/HEADER_body.html | \
  sed "s/{{HANDLE}}/${HANDLE}/" | \
  sed "s#{{URL}}#${FQ_URI}#" | \
  sed "s/{{SUMMARY}}/${ITEM_SUMMARY}/" | \
  sed "s#{{BASE_URL}}#${BASE_URL}#g" \
    > $BUILD_DIR/$SRC_NAME.html

  # template magic: base URL

  # convert content body if necessary, otherwise use raw HTML
  if [[ "$SRC_TYPE" == "md" ]] ; then
    #echo "  convert: $ITEM -> $BUILD_DIR/$SRC_NAME.html"
    tools/Markdown_1.0.1/Markdown.pl $ITEM >> $BUILD_DIR/$SRC_NAME.html
  elif [[ "$SRC_TYPE" == "html" ]] ; then
    #echo "  concat : $ITEM -> $BUILD_DIR/$SRC_NAME.html"
    cat $ITEM >> $BUILD_DIR/$SRC_NAME.html
  fi

  # template magic: footer
  LAST_MOD=$(echo $ITEM_MOD_DATE | sed -e "s/T.*$//")
  EDIT_URL="${GIT_BASE}${ITEM}"
  sed "s/{{LAST_MOD}}/${LAST_MOD}/g" themes/${THEME}/FOOTER_body.html | \
  sed "s#{{EDIT_URL}}#${EDIT_URL}#g" | \
  sed "s#{{BASE_URL}}#${BASE_URL}#g" >> $BUILD_DIR/$SRC_NAME.html

done

# marker for next run
touch $DB/last_gen

# copy any static theme contents into the build directory, smartly
if [ -d themes/${THEME}/static ] ; then
  if [ ! -d build/themes ] ; then
    mkdir build/themes
  fi
  rsync -av themes/${THEME}/static/* build/themes/${THEME}/
fi

# copy any static contents into the build directory, smartly
rsync -av static/* build/$BASE_DIR/

# EOF
